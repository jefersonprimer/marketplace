// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

type Category struct {
	ID     string    `json:"id"`
	Name   string    `json:"name"`
	Slug   string    `json:"slug"`
	Parent *Category `json:"parent,omitempty"`
}

type Mutation struct {
}

type NewCategory struct {
	Name     string  `json:"name"`
	Slug     string  `json:"slug"`
	ParentID *string `json:"parentId,omitempty"`
}

type NewProduct struct {
	Name        string        `json:"name"`
	Slug        string        `json:"slug"`
	Description *string       `json:"description,omitempty"`
	Price       float64       `json:"price"`
	Stock       int32         `json:"stock"`
	Status      ProductStatus `json:"status"`
	ImageURL    *string       `json:"imageUrl,omitempty"`
	CategoryID  string        `json:"categoryId"`
	StoreID     string        `json:"storeId"`
}

type Product struct {
	ID          string        `json:"id"`
	Name        string        `json:"name"`
	Slug        string        `json:"slug"`
	Description *string       `json:"description,omitempty"`
	Price       float64       `json:"price"`
	Stock       int32         `json:"stock"`
	Status      ProductStatus `json:"status"`
	ImageURL    *string       `json:"imageUrl,omitempty"`
	Category    *Category     `json:"category"`
	Store       *Store        `json:"store"`
}

type Query struct {
}

type Store struct {
	ID          string  `json:"id"`
	Name        string  `json:"name"`
	Slug        string  `json:"slug"`
	Description *string `json:"description,omitempty"`
	LogoURL     *string `json:"logoUrl,omitempty"`
	BannerURL   *string `json:"bannerUrl,omitempty"`
}

type ProductStatus string

const (
	ProductStatusActive     ProductStatus = "ACTIVE"
	ProductStatusInactive   ProductStatus = "INACTIVE"
	ProductStatusOutOfStock ProductStatus = "OUT_OF_STOCK"
)

var AllProductStatus = []ProductStatus{
	ProductStatusActive,
	ProductStatusInactive,
	ProductStatusOutOfStock,
}

func (e ProductStatus) IsValid() bool {
	switch e {
	case ProductStatusActive, ProductStatusInactive, ProductStatusOutOfStock:
		return true
	}
	return false
}

func (e ProductStatus) String() string {
	return string(e)
}

func (e *ProductStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductStatus", str)
	}
	return nil
}

func (e ProductStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *ProductStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e ProductStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
