package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"backend/graph/model"
	"backend/internal/domain/entities"
	"context"
	"fmt"
	"github.com/google/uuid"
)

// CreateCategory is the resolver for the createCategory field.
func (r *mutationResolver) CreateCategory(ctx context.Context, input model.NewCategory) (*model.Category, error) {
	// Converter input para entidade
	categoryID := uuid.New()
	var parentID uuid.UUID
	if input.ParentID != nil {
		parsedParentID, _ := uuid.Parse(*input.ParentID)
		parentID = parsedParentID
	}
	
	category := &entities.Category{
		ID:       categoryID,
		Name:     input.Name,
		Slug:     input.Slug,
		ParentID: parentID,
	}
	
	err := r.CategoryUseCase.CreateCategory(category)
	if err != nil {
		return nil, err
	}
	
	// Converter entidade para modelo GraphQL
	result := &model.Category{
		ID:   category.ID.String(),
		Name: category.Name,
		Slug: category.Slug,
	}
	
	if category.ParentID != uuid.Nil {
		result.Parent = &model.Category{ID: category.ParentID.String()}
	}
	
	return result, nil
}

// CreateProduct is the resolver for the createProduct field.
func (r *mutationResolver) CreateProduct(ctx context.Context, input model.NewProduct) (*model.Product, error) {
	product := &model.Product{
		ID:          uuid.New().String(),
		Name:        input.Name,
		Slug:        input.Slug,
		Description: input.Description,
		Price:       input.Price,
		Stock:       input.Stock,
		Status:      input.Status,
		ImageURL:    input.ImageURL,
		Category:    &model.Category{ID: input.CategoryID},
		Store:       &model.Store{ID: input.StoreID},
	}
	products = append(products, product)
	return product, nil
}

// Categories is the resolver for the categories field.
func (r *queryResolver) Categories(ctx context.Context) ([]*model.Category, error) {
	categories, err := r.CategoryUseCase.GetAllCategories()
	if err != nil {
		return nil, err
	}
	
	var result []*model.Category
	for _, category := range categories {
		result = append(result, &model.Category{
			ID:   category.ID.String(),
			Name: category.Name,
			Slug: category.Slug,
		})
	}
	
	return result, nil
}

// Category is the resolver for the category field.
func (r *queryResolver) Category(ctx context.Context, id string) (*model.Category, error) {
	categoryID, err := uuid.Parse(id)
	if err != nil {
		return nil, fmt.Errorf("invalid category ID")
	}
	
	category, err := r.CategoryUseCase.GetCategoryByID(categoryID)
	if err != nil {
		return nil, err
	}
	
	return &model.Category{
		ID:   category.ID.String(),
		Name: category.Name,
		Slug: category.Slug,
	}, nil
}

// Products is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context, categoryID *string) ([]*model.Product, error) {
	if categoryID != nil {
		var filteredProducts []*model.Product
		for _, product := range products {
			if product.Category.ID == *categoryID {
				filteredProducts = append(filteredProducts, product)
			}
		}
		return filteredProducts, nil
	}
	return products, nil
}

// Product is the resolver for the product field.
func (r *queryResolver) Product(ctx context.Context, id string) (*model.Product, error) {
	for _, product := range products {
		if product.ID == id {
			return product, nil
		}
	}
	return nil, fmt.Errorf("product not found")
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.

