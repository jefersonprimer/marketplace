// Code generated by Wire. DO NOT EDIT.

//go:build !wireinject
// +build !wireinject

package graph

import (
	"backend/internal/application/usecases"
	"backend/internal/infrastructure/config"
	infra "backend/internal/infrastructure/repositories"

	"gorm.io/gorm"
)

// InitializeResolver is generated by Wire.
func InitializeResolver() (*Resolver, error) {
	db, err := provideDB()
	if err != nil {
		return nil, err
	}

	// Criar reposit√≥rios
	productRepository := infra.NewProductRepository(db)
	categoryRepository := infra.NewCategoryRepository(db)
	storeRepository := infra.NewStoreRepository(db)

	// Criar usecases principais
	productUseCase := usecases.NewProductUseCase(productRepository, categoryRepository, storeRepository)
	categoryUseCase := usecases.NewCategoryUseCase(categoryRepository)
	storeUseCase := usecases.NewStoreUseCase(storeRepository)

	// Criar usecases existentes usando os construtores
	productPriceHistoryUseCase := usecases.NewProductPriceHistoryUseCase(&infra.ProductPriceHistoryRepositoryImpl{DB: db})
	productReviewUseCase := usecases.NewProductReviewUseCase(&infra.ProductReviewRepositoryImpl{DB: db})
	productVariantUseCase := usecases.NewProductVariantUseCase(&infra.ProductVariantRepositoryImpl{DB: db})
	profileDocumentUseCase := usecases.NewProfileDocumentUseCase(&infra.ProfileDocumentRepositoryImpl{DB: db})
	promotionUseCase := usecases.NewPromotionUseCase(&infra.PromotionRepositoryImpl{DB: db})
	returnUseCase := usecases.NewReturnUseCase(&infra.ReturnRepositoryImpl{DB: db})
	sellerPaymentUseCase := usecases.NewSellerPaymentUseCase(&infra.SellerPaymentRepositoryImpl{DB: db})
	shippingMethodUseCase := usecases.NewShippingMethodUseCase(&infra.ShippingMethodRepositoryImpl{DB: db})
	stockMovementUseCase := usecases.NewStockMovementUseCase(&infra.StockMovementRepositoryImpl{DB: db})
	storeCategoryUseCase := usecases.NewStoreCategoryUseCase(&infra.StoreCategoryRepositoryImpl{DB: db})
	storeCommissionUseCase := usecases.NewStoreCommissionUseCase(&infra.StoreCommissionRepositoryImpl{DB: db})
	storePolicyUseCase := usecases.NewStorePolicyUseCase(&infra.StorePolicyRepositoryImpl{DB: db})
	storeReviewUseCase := usecases.NewStoreReviewUseCase(&infra.StoreReviewRepositoryImpl{DB: db})
	storeShippingMethodUseCase := usecases.NewStoreShippingMethodUseCase(&infra.StoreShippingMethodRepositoryImpl{DB: db})
	storeTransactionUseCase := usecases.NewStoreTransactionUseCase(&infra.StoreTransactionRepositoryImpl{DB: db})
	userActivityLogUseCase := usecases.NewUserActivityLogUseCase(&infra.UserActivityLogRepositoryImpl{DB: db})
	variantOptionUseCase := usecases.NewVariantOptionUseCase(&infra.VariantOptionRepositoryImpl{DB: db})
	warehouseUseCase := usecases.NewWarehouseUseCase(&infra.WarehouseRepositoryImpl{DB: db})
	wishlistUseCase := usecases.NewWishlistUseCase(&infra.WishlistRepositoryImpl{DB: db})

	resolver := &Resolver{
		ProductUseCase:             productUseCase,
		CategoryUseCase:            categoryUseCase,
		StoreUseCase:               storeUseCase,
		ProductPriceHistoryUseCase: productPriceHistoryUseCase,
		ProductReviewUseCase:       productReviewUseCase,
		ProductVariantUseCase:      productVariantUseCase,
		ProfileDocumentUseCase:     profileDocumentUseCase,
		PromotionUseCase:           promotionUseCase,
		ReturnUseCase:              returnUseCase,
		SellerPaymentUseCase:       sellerPaymentUseCase,
		ShippingMethodUseCase:      shippingMethodUseCase,
		StockMovementUseCase:       stockMovementUseCase,
		StoreCategoryUseCase:       storeCategoryUseCase,
		StoreCommissionUseCase:     storeCommissionUseCase,
		StorePolicyUseCase:         storePolicyUseCase,
		StoreReviewUseCase:         storeReviewUseCase,
		StoreShippingMethodUseCase: storeShippingMethodUseCase,
		StoreTransactionUseCase:    storeTransactionUseCase,
		UserActivityLogUseCase:     userActivityLogUseCase,
		VariantOptionUseCase:       variantOptionUseCase,
		WarehouseUseCase:           warehouseUseCase,
		WishlistUseCase:            wishlistUseCase,
	}

	return resolver, nil
}

func provideDB() (*gorm.DB, error) {
	return config.NewDatabase()
}
